#!/usr/bin/env bash

set -o errexit  # Set the script to exit immediately if a command fails
set -o pipefail # Set the script to exit immediately in case of an error in a pipeline
set -o nounset  # Treat unset variables as an error and exit immediately

# Set the necessary environment variables for the database connection
export PGHOST=${POSTGRES_HOST}         # The host where the PostgreSQL database is running
export PGPORT=${POSTGRES_PORT}         # The port number for connecting to the PostgreSQL database
export PGUSER=${POSTGRES_USER}         # The username for accessing the PostgreSQL database
export PGPASSWORD=${POSTGRES_PASSWORD} # The password for the PostgreSQL database user
export PGDATABASE=${POSTGRES_DB}       # The name of the default database to be used

backup_pg() {
    # Initialize variables
    local username=""
    local password=""
    local backup_name=""

    # Parse named arguments
    while getopts "u:p:n:" opt; do
        case ${opt} in
        u) username=${OPTARG} ;;
        p) password=${OPTARG} ;;
        n) backup_name=${OPTARG} ;;
        *)
            message_error "Invalid option: ${opt}"
            exit 1
            ;;
        esac
    done

    # Check if required arguments are provided
    if [[ -n $username && -n $password ]]; then
        export PGUSER="${username}"     # Set the username for PostgreSQL
        export PGPASSWORD="${password}" # Set the password for PostgreSQL
    elif [[ -z $username && -n $password ]] || [[ -n $username && -z $password ]]; then
        message_error "Usage: $0 -u <username> -p <password>"
        exit 1
    fi

    local backup_path=""

    # Check if the backup file name is provided as an argument
    if [[ -n $backup_name ]]; then
        backup_path="${DBMS_BACKUP_DIR}/${backup_name}"
    else
        # Set default backup file name if not provided
        backup_path="${DBMS_BACKUP_DIR}/${DBMS_BACKUP_FILE_PREFIX}___$(date +'%Y_%m_%d__%H_%M_%S')___${DBMS_BACKUP_FILE_SUFFIX}.tar.gz"
    fi

    # Create a tar archive of the PostgreSQL data directory '${PGDATA}' and compress it using gzip
    (tar -cf - ${BACKUP_SOURCE} | gzip -q -9 >"${backup_path}") 2>/dev/null &
    spinner "Creating a backup of PostgreSQL data directory and compressing it." ||
        (rm ${backup_path} && exit 1)

    # Check the exit status of the gunzip function
    if [[ $? -ne 0 ]]; then
        message_error "Backup failed. Please check the pg_dump command."
        exit 1
    fi

    # Display a success message after the backup successfully created
    message_success "DBMS backup successfully created at: '${backup_path}'"
}

backup_db() {
    # Initialize variables
    local username=""
    local password=""
    local db_name=""
    local backup_name=""
    local backup_path=""

    # Parse named arguments
    while getopts "d:n:u:p:" opt; do
        case ${opt} in
        d) db_name=${OPTARG} ;;
        n) backup_name=${OPTARG} ;;
        u) username=${OPTARG} ;;
        p) password=${OPTARG} ;;
        *)
            echo "Invalid option: ${opt}"
            exit 1
            ;;
        esac
    done

    # Check if required username and password are provided
    if [[ -n $username ]] && [[ -n $password ]]; then
        export PGUSER="${username}"     # Set the username for accessing the PostgreSQL database
        export PGPASSWORD="${password}" # Set the password for the PostgreSQL database user
    elif [[ -z $username && -n $password ]] || [[ -n $username && -z $password ]]; then
        message_error "Username and password are required. Usage: $0 -u <username> -p <password>"
        exit 1
    fi

    # Check if the PGUSER is 'postgres' and display an error message if true
    if [[ "${PGUSER}" == "postgres" ]]; then
        message_error "Backing up as 'postgres' user is not supported. Assign 'POSTGRES_USER' env with another one and try again."
        exit 1
    fi

    # Check if database name is provided
    if [[ -n $db_name ]]; then
        export PGDATABASE=${db_name} # Set the name of the default database to be used
    else
        message_error "Database name is required. Usage: $0 -d <database name>"
        exit 1
    fi

    # Check if the backup file name is provided as an argument
    if [[ -n $backup_name ]]; then
        backup_path="${DATA_BACKUP_DIR}/${backup_name}"
    else
        # Set default backup file name if not provided
        backup_path="${DATA_BACKUP_DIR}/${db_name}___$(date +'%Y_%m_%d__%H_%M_%S')___${DATA_BACKUP_FILE_SUFFIX}.sql.gz"
    fi

    # Check if the database exists
    if psql -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname = '$db_name'" | grep -q 1; then
        message_success "Database $db_name found. Initiating backup process..."
        # Backup the database in a compressed format
        pg_dump | gzip -q -9 >"${backup_path}" &
        # Display a spinner message indicating the backup and compression process
        spinner "Creating a backup of the database and compressing the file..." ||
            (rm "${backup_path}" && exit 1)
        message_success "Backup successfully created at: '$backup_path'"
    else
        message_error "Database $db_name not found."
        exit 1
    fi
}

# Check for the function name argument
if [[ $# -eq 0 ]]; then
    message_error "Usage: $0 <function_name> [arguments]"
    exit 1
fi

function_name=$1

# Based on the provided argument, initiate the appropriate backup process
case $function_name in
"pg")
    shift
    backup_pg "$@"
    ;;
"db")
    shift
    # Initiate a backup process for a specific database
    backup_db "$@"
    ;;
"dbms")
    shift
    # Display a welcoming message before starting the DBMS backup
    message_welcome "Initializing DBMS backup..."
    # Initiate the DBMS backup process with the provided arguments
    backup_pg "$@"
    ;;
"data")
    db_name=""
    # Display a message indicating the start of the database backup process
    message_welcome "Initializing database backup"
    # List available databases and prompt the user to select one for backup
    message_ask "Please select a database to back up. Here are your current databases:"
    list_databases "${POSTGRES_USER}" "${POSTGRES_PASSWORD}"
    read -p "  Enter the name of the database you wish to back up:  " db_name
    # Initiate the backup process for the selected database
    backup_db -d "$db_name" "$@"
    ;;
*)
    # Display an error message for an invalid function name
    message_error "Invalid function name. Available functions: pg, db, dbms, data"
    exit 1
    ;;
esac
